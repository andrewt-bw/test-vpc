
Steps to Implement
Set Up Terraform

Define the required AWS provider and backend if necessary.
Create a VPC

CIDR block: 10.0.0.0/16
Create Public & Private Subnets

Three public subnets in different AZs
Three private subnets in different AZs
Internet Gateway & Route Tables

Attach an Internet Gateway (IGW) for public subnets
Create a public route table and associate it with public subnets
Ensure private subnets do not have internet access
Security Groups

Define an SG that allows HTTP (port 80) and SSH (port 22) access for public instances
Provision an EC2 Instance in a Public Subnet

Assign a public IP so it is reachable
Security group should allow HTTP (80) traffic
Make the Code Reusable

Use variables for flexibility
Commit Thoughtfully

Follow a structured commit history:
"Initialize Terraform project and define provider"
"Create VPC and subnets"
"Define IGW and route tables"
"Set up security groups"
"Deploy EC2 instance in public subnet"
Terraform Code Implementation



provider "aws" {
  region = "us-east-1"
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "public" {
  count = 3

  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.${count.index}.0/24"
  map_public_ip_on_launch = true
  availability_zone = element(["us-east-1a", "us-east-1b", "us-east-1c"], count.index)
}

resource "aws_subnet" "private" {
  count = 3

  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.${count.index + 10}.0/24"
  availability_zone = element(["us-east-1a", "us-east-1b", "us-east-1c"], count.index)
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}

resource "aws_route_table_association" "public_assoc" {
  count = 3
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_security_group" "web_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "web" {
  ami           = "ami-0c55b159cbfafe1f0" # Replace with valid AMI
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public[0].id
  security_groups = [aws_security_group.web_sg.id]
  associate_public_ip_address = true
}
